# **Assignment For Numpy**

Difficulty Level **Beginner**

1. Import the numpy package under the name np

import numpy as np

2. Create a null vector of size 10 

a = np.zeros(10)

3. Create a vector with values ranging from 10 to 49

b = np.arange(10,49)

4. Find the shape of previous array in question 3

b.shape

5. Print the type of the previous array in question 3

b.dtype

6. Print the numpy version and the configuration


print(np.__version__)
print(np.show_config())

7. Print the dimension of the array in question 3


b.ndim

8. Create a boolean array with all the True values

np.ones((2, 2), dtype=bool)

9. Create a two dimensional array




np.zeros((2,2))

10. Create a three dimensional array



np.zeros((2, 2, 2))

Difficulty Level **Easy**

11. Reverse a vector (first element becomes last)

d = np.arange(1, 10)
e = d[::-1]
e

12. Create a null vector of size 10 but the fifth value which is 1 

c = np.zeros(10)
c[4] = 1
c

13. Create a 3x3 identity matrix

arry=np.identity(3)
arry

14. arr = np.array([1, 2, 3, 4, 5]) 

---

 Convert the data type of the given array from int to float 

ary = np.array([1, 2, 3, 4, 5]) 
ary = ary.astype('float64') 
ary.dtype

15. arr1 =          np.array([[1., 2., 3.],

                    [4., 5., 6.]])  
                      
    arr2 = np.array([[0., 4., 1.],
     
                   [7., 2., 12.]])

---


Multiply arr1 with arr2


arr1 = np.array([[1., 2., 3.],[4., 5., 6.]]) 
    
arr2 = np.array([[0., 4., 1.],[7., 2., 12.]])
res = arr1*arr2
res


16. arr1 = np.array([[1., 2., 3.],
                    [4., 5., 6.]]) 
                    
    arr2 = np.array([[0., 4., 1.], 
                    [7., 2., 12.]])


---

Make an array by comparing both the arrays provided above

arr1 = np.array([[1., 2., 3.],[4., 5., 6.]]) 
arr2 = np.array([[0., 4., 1.],[7., 2., 12.]])
res = arr1 == arr2
res

17. Extract all odd numbers from arr with values(0-9)

d = np.arange(1, 10)
odd = (d%2 == 1)
d[odd]

18. Replace all odd numbers to -1 from previous array

d = np.arange(1, 10)
odd = (d%2 == 1)
d[odd] = -1
d

19. arr = np.arange(10)


---

Replace the values of indexes 5,6,7 and 8 to **12**

arr = np.arange(10)
print(arr)
arr[5] =12
arr[6] =12
arr[7] =12
arr[8] =12
arr


20. Create a 2d array with 1 on the border and 0 inside

a=np.ones((5,5))
a[1:-1,1:-1]=0
a

Difficulty Level **Medium**

21. arr2d = np.array([[1, 2, 3],

                    [4, 5, 6], 

                    [7, 8, 9]])

---

Replace the value 5 to 12

arr2d = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]])
arr2d[1:-1,1:-1]=12
arr2d

22. arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

---
Convert all the values of 1st array to 64


arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
arr3d[:-1,:-1]=64
arr3d

23. Make a 2-Dimensional array with values 0-9 and slice out the first 1st 1-D array from it

a = np.arange(0,10).reshape(5,2)
print(a)
res = a[0:1:1]
res

24. Make a 2-Dimensional array with values 0-9 and slice out the 2nd value from 2nd 1-D array from it

a = np.arange(0,10).reshape(2,5)
print(a)
res = a[1:2:,1:2:]
res

25. Make a 2-Dimensional array with values 0-9 and slice out the third column but only the first two rows

a = np.arange(0,10).reshape(2,5)
print(a)
res = a[0:2:,3:4:]
res

26. Create a 10x10 array with random values and find the minimum and maximum values

x = np.random.randn(10,10)
print(np.max(x))
print(np.min(x))

27. a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])
---
Find the common items between a and b


a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])
print(np.intersect1d(a, b))

28. a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

---
Find the positions where elements of a and b match



a = np.array([1,2,3,2,3,4,3,4,5,6]) 
b = np.array([7,2,10,2,7,4,9,4,9,8])
np.where(a==b)

29.  names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])  data = np.random.randn(7, 4)

---
Find all the values from array **data** where the values from array **names** are not equal to **Will**


names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
data = np.random.randn(7, 4)
print(names != 'Will')
data[names != 'Will']

30. names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) data = np.random.randn(7, 4)

---
Find all the values from array **data** where the values from array **names** are not equal to **Will** and **Joe**



names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) 
data = np.random.randn(7, 4)
mask = (names != 'Will') & (names != 'Joe')
print(mask)
data[mask]

Difficulty Level **Hard**

31. Create a 2D array of shape 5x3 to contain decimal numbers between 1 and 15.

rand_arr = np.arange(1,16).reshape(5,3)
rand_arr

32. Create an array of shape (2, 2, 4) with decimal numbers between 1 to 16.

rand_arr = np.arange(1,17).reshape(2,2,4)
rand_arr

33. Swap axes of the array you created in Question 32

#np.swapaxes(rand_arr, 2, 0)
rand_arr.transpose()

34. Create an array of size 10, and find the square root of every element in the array, if the values less than 0.5, replace them with 0

arr=np.array([1,2,3,4,5,6,7,8,9,10])
sqrot = np.sqrt(arr)
sqrot
np.where(sqrot<0.5,0,sqrot)

35. Create two random arrays of range 12 and make an array with the maximum values between each element of the two arrays

a = np.random.randn(12)
print(a)
b = np.random.randn(12)
print(b)
res = np.maximum(a,b)
print('Result Array')
print(res)

36. names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])

---
Find the unique names and sort them out!


names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
res = np.unique(names)
print(res)
print('Sorting Array')
res1 = np.sort(res)
res1

37. a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])

---
From array a remove all items present in array b



a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])
res = np.setdiff1d(a, b)
res

38.  Following is the input NumPy array delete column two and insert following new column in its place.

---
sampleArray = numpy.array([[34,43,73],[82,22,12],[53,94,66]]) 


---

newColumn = numpy.array([[10,10,10]])


sampleArray = np.array([[34,43,73],[82,22,12],[53,94,66]])
print('Original Array')
print(sampleArray)
sampleArray = np.delete(sampleArray , 1, axis = 1)
print('Column Deleted')
print (sampleArray)
newColumn = np.array([[10,10,10]])
sampleArray = np.insert(sampleArray , 1, newColumn, axis = 1)
print('Modified Array')
print (sampleArray)

39. x = np.array([[1., 2., 3.], [4., 5., 6.]]) y = np.array([[6., 23.], [-1, 7], [8, 9]])


---
Find the dot product of the above two matrix


x = np.array([[1., 2., 3.], [4., 5., 6.]])
y = np.array([[6., 23.], [-1, 7], [8, 9]])
res = np.dot(x,y)
res

40. Generate a matrix of 20 random values and find its cumulative sum

#Z = np.random.random(20)
arr = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])
arr
res = np.cumsum(arr)
res

